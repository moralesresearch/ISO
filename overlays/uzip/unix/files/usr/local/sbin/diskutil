#!/usr/bin/env python3

"""
A simple stand-in for diskutil rename
"""

import os, argparse, shutil, subprocess, time


def ensure_avail(tool):
    """Check whether `name` is on PATH and marked as executable, exit with an error otherwise."""

    from shutil import which
    if which(tool) is None:
        exit("The command line tool '%s' is needed but is not available.\nPlease install it, then try again." % tool)
        # TODO: Also print the name of the command to install the package for well-known operating systems


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Rename disks.')
    parser.add_argument('rename', nargs=3, help='Rename a disk ("volume label")')

    args = parser.parse_args()

    if len(args.rename) != 3:
        print("Usage: rename /dev/diskXsY 'Disk Name'")
        exit("       rename /media/DISK1 'Disk Name'")

    name = args.rename[2]

    device = None
    if os.path.ismount(args.rename[1]):
        # Get the device name from the mount point
        result = subprocess.run(["mount", "-p"], capture_output=True)
        if result.returncode != 0:
            exit("Could get list of mounted devices.")
        lines = str(result.stdout.decode()).strip().split("\n")
        mntdevs = list(map(lambda line: line.split()[0], lines))
        mntpoints = list(map(lambda line: line.split()[1], lines))
        if args.rename[1] in mntpoints:
            was_mounted = True
            device = mntdevs[mntpoints.index(args.rename[1])]
    else:
        if args.rename[1].startswith("/dev"):
            device = args.rename[1]
        else:
            exit("Device must start with /dev.")

    # Check if the device exists
    if not os.path.exists(device):
        exit("Device %s does not exist" % device)

    # Make sure we have the blkid tool
    ensure_avail("blkid")

    # Get the old name with
    # blkid -s LABEL -o value /dev/da0
    # FIXME: Other than fstyp, this only shows UPPERCASE for msdosfs. Why?
    result = subprocess.run(["blkid", "-s", "LABEL", "-o" ,"value", device], capture_output=True)
    if result.returncode != 0:
        exit("Could not determine the old label for %s." % device)
    old_name = str(result.stdout.decode()).strip()
    print("Old name: '%s'" % old_name)

    # Get the filesystem type with
    # blkid -s TYPE -o value /dev/da0
    result = subprocess.run(["blkid", "-s", "TYPE", "-o" ,"value", device], capture_output=True)
    if result.returncode != 0:
        exit("Could not determine the file system on %s." % device)
    filesystem = str(result.stdout.decode()).strip()

    # TODO: Find the canonical source of all the filesystem names in blkid
    # and implement at least a stub here for each of them
    if filesystem.startswith("ext"):
        tool = "e2label"
        args = [device, name]
    elif filesystem == "ntfs":
        tool = "ntfslabel"
        args = [device, name]
    elif filesystem.startswith("reiser"):
        tool = "reiserfstune"
        args = ["-l", name, device]
    elif filesystem == "vfat":
        tool = "mlabel"
        args = ["-i", device, "::" + name]
    else:
        tool = None
        args = []

    if tool is None:
        exit("The file system %s on %s is not supported by this tool." % (filesystem, device))

    # TODO: Check if the name given can be used for this type of file system

    # Make sure we have the tool needed to rename this file system
    ensure_avail(tool)

    # Check if the device is mounted
    result = subprocess.run(["mount", "-p"], capture_output=True)
    if result.returncode != 0:
        exit("Could not determine whether %s is mounted." % device)
    lines = str(result.stdout.decode()).strip().split("\n")
    mntdevs = list(map(lambda line: line.split()[0], lines))
    mntpoints = list(map(lambda line: line.split()[1], lines))
    mntfstypes = list(map(lambda line: line.split()[2], lines))
    mntopts = list(map(lambda line: line.split()[3], lines))
    was_mounted = False
    if device in mntdevs:
        was_mounted = True

    # Unmount the device if it is mounted
    if was_mounted:
        print("Unmounting %s..." % device)
        result = subprocess.run(["umount", device], capture_output=True)
        if result.returncode != 0:
            exit("Could not unmount %s." % device)

    # Perform the rename
    print("Renaming device %s to '%s'..." % (device, name))
    args.insert(0, tool)
    print( " ".join(args))
    result = subprocess.run(args, capture_output=True)
    if result.returncode != 0:
        exit("Could not rename %s." % device)

    # Get the new name with
    # blkid -s LABEL -o value /dev/da0
    # FIXME: Other than fstyp, this only shows UPPERCASE for msdosfs. Why?
    result = subprocess.run(["blkid", "-s", "LABEL", "-o" ,"value", device], capture_output=True)
    if result.returncode != 0:
        exit("Could not determine the new label for %s." % device)
    new_name = str(result.stdout.decode()).strip()
    print("New name: '%s'" % new_name)

    # Mount the device again if it was mounted before
    # Potentially by sending a devd/udev message that lets automount do its thing?
    if was_mounted:
        # Note: Need /usr/local/sbin/automount, not /usr/sbin/automount
        args = ["/usr/local/sbin/automount", device.replace("/dev/", ""), "attach"]
        result = subprocess.run(args, capture_output=True)
        print(" ".join(args))
        if result.returncode != 0:
            exit("Could not mount %s." % device)

    if os.geteuid() != 0:
        exit("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'.")
    
